name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    # Install required system dependencies
    - name: Install system dependencies
      run: |
        wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2_amd64.deb
        sudo dpkg -i libssl1.1_1.1.1f-1ubuntu2_amd64.deb
    
    - name: Install dependencies
      run: npm ci
    
    # Increase Jest timeout and run tests
    - name: Run tests
      run: |
        echo "jest.setTimeout(30000);" > jest.setup.js
        NODE_ENV=test npm test -- --setupFilesAfterEnv='<rootDir>/jest.setup.js' --forceExit
      
  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Get version
      id: get_version
      run: |
        # Get the short SHA of the commit
        SHA=$(git rev-parse --short HEAD)
        # Get current timestamp
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        # Set version as output
        echo "VERSION=${TIMESTAMP}-${SHA}" >> $GITHUB_OUTPUT
        # If this is a tag, use it as version
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          TAG=${GITHUB_REF#refs/tags/}
          echo "VERSION=${TAG}" >> $GITHUB_OUTPUT
        fi
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/microservices-api:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/microservices-api:${{ steps.get_version.outputs.VERSION }}
        cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/microservices-api:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/microservices-api:buildcache,mode=max 